// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/k8snetworkplumbingwg/rdma-cni/pkg/cache"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStateCache creates a new instance of MockStateCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateCache {
	mock := &MockStateCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStateCache is an autogenerated mock type for the StateCache type
type MockStateCache struct {
	mock.Mock
}

type MockStateCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateCache) EXPECT() *MockStateCache_Expecter {
	return &MockStateCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockStateCache
func (_mock *MockStateCache) Delete(ref cache.StateRef) error {
	ret := _mock.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(cache.StateRef) error); ok {
		r0 = returnFunc(ref)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStateCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStateCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ref cache.StateRef
func (_e *MockStateCache_Expecter) Delete(ref interface{}) *MockStateCache_Delete_Call {
	return &MockStateCache_Delete_Call{Call: _e.mock.On("Delete", ref)}
}

func (_c *MockStateCache_Delete_Call) Run(run func(ref cache.StateRef)) *MockStateCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 cache.StateRef
		if args[0] != nil {
			arg0 = args[0].(cache.StateRef)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStateCache_Delete_Call) Return(err error) *MockStateCache_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStateCache_Delete_Call) RunAndReturn(run func(ref cache.StateRef) error) *MockStateCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateRef provides a mock function for the type MockStateCache
func (_mock *MockStateCache) GetStateRef(network string, cid string, ifname string) cache.StateRef {
	ret := _mock.Called(network, cid, ifname)

	if len(ret) == 0 {
		panic("no return value specified for GetStateRef")
	}

	var r0 cache.StateRef
	if returnFunc, ok := ret.Get(0).(func(string, string, string) cache.StateRef); ok {
		r0 = returnFunc(network, cid, ifname)
	} else {
		r0 = ret.Get(0).(cache.StateRef)
	}
	return r0
}

// MockStateCache_GetStateRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRef'
type MockStateCache_GetStateRef_Call struct {
	*mock.Call
}

// GetStateRef is a helper method to define mock.On call
//   - network string
//   - cid string
//   - ifname string
func (_e *MockStateCache_Expecter) GetStateRef(network interface{}, cid interface{}, ifname interface{}) *MockStateCache_GetStateRef_Call {
	return &MockStateCache_GetStateRef_Call{Call: _e.mock.On("GetStateRef", network, cid, ifname)}
}

func (_c *MockStateCache_GetStateRef_Call) Run(run func(network string, cid string, ifname string)) *MockStateCache_GetStateRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStateCache_GetStateRef_Call) Return(stateRef cache.StateRef) *MockStateCache_GetStateRef_Call {
	_c.Call.Return(stateRef)
	return _c
}

func (_c *MockStateCache_GetStateRef_Call) RunAndReturn(run func(network string, cid string, ifname string) cache.StateRef) *MockStateCache_GetStateRef_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function for the type MockStateCache
func (_mock *MockStateCache) Load(ref cache.StateRef, state interface{}) error {
	ret := _mock.Called(ref, state)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(cache.StateRef, interface{}) error); ok {
		r0 = returnFunc(ref, state)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStateCache_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockStateCache_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ref cache.StateRef
//   - state interface{}
func (_e *MockStateCache_Expecter) Load(ref interface{}, state interface{}) *MockStateCache_Load_Call {
	return &MockStateCache_Load_Call{Call: _e.mock.On("Load", ref, state)}
}

func (_c *MockStateCache_Load_Call) Run(run func(ref cache.StateRef, state interface{})) *MockStateCache_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 cache.StateRef
		if args[0] != nil {
			arg0 = args[0].(cache.StateRef)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStateCache_Load_Call) Return(err error) *MockStateCache_Load_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStateCache_Load_Call) RunAndReturn(run func(ref cache.StateRef, state interface{}) error) *MockStateCache_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockStateCache
func (_mock *MockStateCache) Save(ref cache.StateRef, state interface{}) error {
	ret := _mock.Called(ref, state)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(cache.StateRef, interface{}) error); ok {
		r0 = returnFunc(ref, state)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStateCache_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockStateCache_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ref cache.StateRef
//   - state interface{}
func (_e *MockStateCache_Expecter) Save(ref interface{}, state interface{}) *MockStateCache_Save_Call {
	return &MockStateCache_Save_Call{Call: _e.mock.On("Save", ref, state)}
}

func (_c *MockStateCache_Save_Call) Run(run func(ref cache.StateRef, state interface{})) *MockStateCache_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 cache.StateRef
		if args[0] != nil {
			arg0 = args[0].(cache.StateRef)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStateCache_Save_Call) Return(err error) *MockStateCache_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStateCache_Save_Call) RunAndReturn(run func(ref cache.StateRef, state interface{}) error) *MockStateCache_Save_Call {
	_c.Call.Return(run)
	return _c
}
