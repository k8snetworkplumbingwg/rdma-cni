// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/containernetworking/plugins/pkg/ns"
	mock "github.com/stretchr/testify/mock"
)

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetRdmaDevsForAuxDev provides a mock function for the type MockManager
func (_mock *MockManager) GetRdmaDevsForAuxDev(auxDev string) []string {
	ret := _mock.Called(auxDev)

	if len(ret) == 0 {
		panic("no return value specified for GetRdmaDevsForAuxDev")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(auxDev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockManager_GetRdmaDevsForAuxDev_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRdmaDevsForAuxDev'
type MockManager_GetRdmaDevsForAuxDev_Call struct {
	*mock.Call
}

// GetRdmaDevsForAuxDev is a helper method to define mock.On call
//   - auxDev string
func (_e *MockManager_Expecter) GetRdmaDevsForAuxDev(auxDev interface{}) *MockManager_GetRdmaDevsForAuxDev_Call {
	return &MockManager_GetRdmaDevsForAuxDev_Call{Call: _e.mock.On("GetRdmaDevsForAuxDev", auxDev)}
}

func (_c *MockManager_GetRdmaDevsForAuxDev_Call) Run(run func(auxDev string)) *MockManager_GetRdmaDevsForAuxDev_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_GetRdmaDevsForAuxDev_Call) Return(strings []string) *MockManager_GetRdmaDevsForAuxDev_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockManager_GetRdmaDevsForAuxDev_Call) RunAndReturn(run func(auxDev string) []string) *MockManager_GetRdmaDevsForAuxDev_Call {
	_c.Call.Return(run)
	return _c
}

// GetRdmaDevsForPciDev provides a mock function for the type MockManager
func (_mock *MockManager) GetRdmaDevsForPciDev(pciDev string) []string {
	ret := _mock.Called(pciDev)

	if len(ret) == 0 {
		panic("no return value specified for GetRdmaDevsForPciDev")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(pciDev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockManager_GetRdmaDevsForPciDev_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRdmaDevsForPciDev'
type MockManager_GetRdmaDevsForPciDev_Call struct {
	*mock.Call
}

// GetRdmaDevsForPciDev is a helper method to define mock.On call
//   - pciDev string
func (_e *MockManager_Expecter) GetRdmaDevsForPciDev(pciDev interface{}) *MockManager_GetRdmaDevsForPciDev_Call {
	return &MockManager_GetRdmaDevsForPciDev_Call{Call: _e.mock.On("GetRdmaDevsForPciDev", pciDev)}
}

func (_c *MockManager_GetRdmaDevsForPciDev_Call) Run(run func(pciDev string)) *MockManager_GetRdmaDevsForPciDev_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_GetRdmaDevsForPciDev_Call) Return(strings []string) *MockManager_GetRdmaDevsForPciDev_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockManager_GetRdmaDevsForPciDev_Call) RunAndReturn(run func(pciDev string) []string) *MockManager_GetRdmaDevsForPciDev_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemRdmaMode provides a mock function for the type MockManager
func (_mock *MockManager) GetSystemRdmaMode() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSystemRdmaMode")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_GetSystemRdmaMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemRdmaMode'
type MockManager_GetSystemRdmaMode_Call struct {
	*mock.Call
}

// GetSystemRdmaMode is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetSystemRdmaMode() *MockManager_GetSystemRdmaMode_Call {
	return &MockManager_GetSystemRdmaMode_Call{Call: _e.mock.On("GetSystemRdmaMode")}
}

func (_c *MockManager_GetSystemRdmaMode_Call) Run(run func()) *MockManager_GetSystemRdmaMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetSystemRdmaMode_Call) Return(s string, err error) *MockManager_GetSystemRdmaMode_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockManager_GetSystemRdmaMode_Call) RunAndReturn(run func() (string, error)) *MockManager_GetSystemRdmaMode_Call {
	_c.Call.Return(run)
	return _c
}

// MoveRdmaDevToNs provides a mock function for the type MockManager
func (_mock *MockManager) MoveRdmaDevToNs(rdmaDev string, netNs ns.NetNS) error {
	ret := _mock.Called(rdmaDev, netNs)

	if len(ret) == 0 {
		panic("no return value specified for MoveRdmaDevToNs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, ns.NetNS) error); ok {
		r0 = returnFunc(rdmaDev, netNs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_MoveRdmaDevToNs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveRdmaDevToNs'
type MockManager_MoveRdmaDevToNs_Call struct {
	*mock.Call
}

// MoveRdmaDevToNs is a helper method to define mock.On call
//   - rdmaDev string
//   - netNs ns.NetNS
func (_e *MockManager_Expecter) MoveRdmaDevToNs(rdmaDev interface{}, netNs interface{}) *MockManager_MoveRdmaDevToNs_Call {
	return &MockManager_MoveRdmaDevToNs_Call{Call: _e.mock.On("MoveRdmaDevToNs", rdmaDev, netNs)}
}

func (_c *MockManager_MoveRdmaDevToNs_Call) Run(run func(rdmaDev string, netNs ns.NetNS)) *MockManager_MoveRdmaDevToNs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 ns.NetNS
		if args[1] != nil {
			arg1 = args[1].(ns.NetNS)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_MoveRdmaDevToNs_Call) Return(err error) *MockManager_MoveRdmaDevToNs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_MoveRdmaDevToNs_Call) RunAndReturn(run func(rdmaDev string, netNs ns.NetNS) error) *MockManager_MoveRdmaDevToNs_Call {
	_c.Call.Return(run)
	return _c
}

// SetSystemRdmaMode provides a mock function for the type MockManager
func (_mock *MockManager) SetSystemRdmaMode(mode string) error {
	ret := _mock.Called(mode)

	if len(ret) == 0 {
		panic("no return value specified for SetSystemRdmaMode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(mode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_SetSystemRdmaMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSystemRdmaMode'
type MockManager_SetSystemRdmaMode_Call struct {
	*mock.Call
}

// SetSystemRdmaMode is a helper method to define mock.On call
//   - mode string
func (_e *MockManager_Expecter) SetSystemRdmaMode(mode interface{}) *MockManager_SetSystemRdmaMode_Call {
	return &MockManager_SetSystemRdmaMode_Call{Call: _e.mock.On("SetSystemRdmaMode", mode)}
}

func (_c *MockManager_SetSystemRdmaMode_Call) Run(run func(mode string)) *MockManager_SetSystemRdmaMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManager_SetSystemRdmaMode_Call) Return(err error) *MockManager_SetSystemRdmaMode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_SetSystemRdmaMode_Call) RunAndReturn(run func(mode string) error) *MockManager_SetSystemRdmaMode_Call {
	_c.Call.Return(run)
	return _c
}
