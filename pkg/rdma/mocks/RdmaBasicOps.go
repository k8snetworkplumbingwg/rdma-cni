// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/vishvananda/netlink"
)

// NewMockBasicOps creates a new instance of MockBasicOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBasicOps(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBasicOps {
	mock := &MockBasicOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBasicOps is an autogenerated mock type for the BasicOps type
type MockBasicOps struct {
	mock.Mock
}

type MockBasicOps_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBasicOps) EXPECT() *MockBasicOps_Expecter {
	return &MockBasicOps_Expecter{mock: &_m.Mock}
}

// GetRdmaDevicesForAuxdev provides a mock function for the type MockBasicOps
func (_mock *MockBasicOps) GetRdmaDevicesForAuxdev(auxDev string) []string {
	ret := _mock.Called(auxDev)

	if len(ret) == 0 {
		panic("no return value specified for GetRdmaDevicesForAuxdev")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(auxDev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockBasicOps_GetRdmaDevicesForAuxdev_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRdmaDevicesForAuxdev'
type MockBasicOps_GetRdmaDevicesForAuxdev_Call struct {
	*mock.Call
}

// GetRdmaDevicesForAuxdev is a helper method to define mock.On call
//   - auxDev string
func (_e *MockBasicOps_Expecter) GetRdmaDevicesForAuxdev(auxDev interface{}) *MockBasicOps_GetRdmaDevicesForAuxdev_Call {
	return &MockBasicOps_GetRdmaDevicesForAuxdev_Call{Call: _e.mock.On("GetRdmaDevicesForAuxdev", auxDev)}
}

func (_c *MockBasicOps_GetRdmaDevicesForAuxdev_Call) Run(run func(auxDev string)) *MockBasicOps_GetRdmaDevicesForAuxdev_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBasicOps_GetRdmaDevicesForAuxdev_Call) Return(strings []string) *MockBasicOps_GetRdmaDevicesForAuxdev_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockBasicOps_GetRdmaDevicesForAuxdev_Call) RunAndReturn(run func(auxDev string) []string) *MockBasicOps_GetRdmaDevicesForAuxdev_Call {
	_c.Call.Return(run)
	return _c
}

// GetRdmaDevicesForPcidev provides a mock function for the type MockBasicOps
func (_mock *MockBasicOps) GetRdmaDevicesForPcidev(pcidevName string) []string {
	ret := _mock.Called(pcidevName)

	if len(ret) == 0 {
		panic("no return value specified for GetRdmaDevicesForPcidev")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(pcidevName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockBasicOps_GetRdmaDevicesForPcidev_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRdmaDevicesForPcidev'
type MockBasicOps_GetRdmaDevicesForPcidev_Call struct {
	*mock.Call
}

// GetRdmaDevicesForPcidev is a helper method to define mock.On call
//   - pcidevName string
func (_e *MockBasicOps_Expecter) GetRdmaDevicesForPcidev(pcidevName interface{}) *MockBasicOps_GetRdmaDevicesForPcidev_Call {
	return &MockBasicOps_GetRdmaDevicesForPcidev_Call{Call: _e.mock.On("GetRdmaDevicesForPcidev", pcidevName)}
}

func (_c *MockBasicOps_GetRdmaDevicesForPcidev_Call) Run(run func(pcidevName string)) *MockBasicOps_GetRdmaDevicesForPcidev_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBasicOps_GetRdmaDevicesForPcidev_Call) Return(strings []string) *MockBasicOps_GetRdmaDevicesForPcidev_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockBasicOps_GetRdmaDevicesForPcidev_Call) RunAndReturn(run func(pcidevName string) []string) *MockBasicOps_GetRdmaDevicesForPcidev_Call {
	_c.Call.Return(run)
	return _c
}

// RdmaLinkByName provides a mock function for the type MockBasicOps
func (_mock *MockBasicOps) RdmaLinkByName(name string) (*netlink.RdmaLink, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for RdmaLinkByName")
	}

	var r0 *netlink.RdmaLink
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*netlink.RdmaLink, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *netlink.RdmaLink); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netlink.RdmaLink)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBasicOps_RdmaLinkByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RdmaLinkByName'
type MockBasicOps_RdmaLinkByName_Call struct {
	*mock.Call
}

// RdmaLinkByName is a helper method to define mock.On call
//   - name string
func (_e *MockBasicOps_Expecter) RdmaLinkByName(name interface{}) *MockBasicOps_RdmaLinkByName_Call {
	return &MockBasicOps_RdmaLinkByName_Call{Call: _e.mock.On("RdmaLinkByName", name)}
}

func (_c *MockBasicOps_RdmaLinkByName_Call) Run(run func(name string)) *MockBasicOps_RdmaLinkByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBasicOps_RdmaLinkByName_Call) Return(rdmaLink *netlink.RdmaLink, err error) *MockBasicOps_RdmaLinkByName_Call {
	_c.Call.Return(rdmaLink, err)
	return _c
}

func (_c *MockBasicOps_RdmaLinkByName_Call) RunAndReturn(run func(name string) (*netlink.RdmaLink, error)) *MockBasicOps_RdmaLinkByName_Call {
	_c.Call.Return(run)
	return _c
}

// RdmaLinkSetNsFd provides a mock function for the type MockBasicOps
func (_mock *MockBasicOps) RdmaLinkSetNsFd(link *netlink.RdmaLink, fd uint32) error {
	ret := _mock.Called(link, fd)

	if len(ret) == 0 {
		panic("no return value specified for RdmaLinkSetNsFd")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*netlink.RdmaLink, uint32) error); ok {
		r0 = returnFunc(link, fd)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBasicOps_RdmaLinkSetNsFd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RdmaLinkSetNsFd'
type MockBasicOps_RdmaLinkSetNsFd_Call struct {
	*mock.Call
}

// RdmaLinkSetNsFd is a helper method to define mock.On call
//   - link *netlink.RdmaLink
//   - fd uint32
func (_e *MockBasicOps_Expecter) RdmaLinkSetNsFd(link interface{}, fd interface{}) *MockBasicOps_RdmaLinkSetNsFd_Call {
	return &MockBasicOps_RdmaLinkSetNsFd_Call{Call: _e.mock.On("RdmaLinkSetNsFd", link, fd)}
}

func (_c *MockBasicOps_RdmaLinkSetNsFd_Call) Run(run func(link *netlink.RdmaLink, fd uint32)) *MockBasicOps_RdmaLinkSetNsFd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *netlink.RdmaLink
		if args[0] != nil {
			arg0 = args[0].(*netlink.RdmaLink)
		}
		var arg1 uint32
		if args[1] != nil {
			arg1 = args[1].(uint32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBasicOps_RdmaLinkSetNsFd_Call) Return(err error) *MockBasicOps_RdmaLinkSetNsFd_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBasicOps_RdmaLinkSetNsFd_Call) RunAndReturn(run func(link *netlink.RdmaLink, fd uint32) error) *MockBasicOps_RdmaLinkSetNsFd_Call {
	_c.Call.Return(run)
	return _c
}

// RdmaSystemGetNetnsMode provides a mock function for the type MockBasicOps
func (_mock *MockBasicOps) RdmaSystemGetNetnsMode() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RdmaSystemGetNetnsMode")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBasicOps_RdmaSystemGetNetnsMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RdmaSystemGetNetnsMode'
type MockBasicOps_RdmaSystemGetNetnsMode_Call struct {
	*mock.Call
}

// RdmaSystemGetNetnsMode is a helper method to define mock.On call
func (_e *MockBasicOps_Expecter) RdmaSystemGetNetnsMode() *MockBasicOps_RdmaSystemGetNetnsMode_Call {
	return &MockBasicOps_RdmaSystemGetNetnsMode_Call{Call: _e.mock.On("RdmaSystemGetNetnsMode")}
}

func (_c *MockBasicOps_RdmaSystemGetNetnsMode_Call) Run(run func()) *MockBasicOps_RdmaSystemGetNetnsMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBasicOps_RdmaSystemGetNetnsMode_Call) Return(s string, err error) *MockBasicOps_RdmaSystemGetNetnsMode_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockBasicOps_RdmaSystemGetNetnsMode_Call) RunAndReturn(run func() (string, error)) *MockBasicOps_RdmaSystemGetNetnsMode_Call {
	_c.Call.Return(run)
	return _c
}

// RdmaSystemSetNetnsMode provides a mock function for the type MockBasicOps
func (_mock *MockBasicOps) RdmaSystemSetNetnsMode(newMode string) error {
	ret := _mock.Called(newMode)

	if len(ret) == 0 {
		panic("no return value specified for RdmaSystemSetNetnsMode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(newMode)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBasicOps_RdmaSystemSetNetnsMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RdmaSystemSetNetnsMode'
type MockBasicOps_RdmaSystemSetNetnsMode_Call struct {
	*mock.Call
}

// RdmaSystemSetNetnsMode is a helper method to define mock.On call
//   - newMode string
func (_e *MockBasicOps_Expecter) RdmaSystemSetNetnsMode(newMode interface{}) *MockBasicOps_RdmaSystemSetNetnsMode_Call {
	return &MockBasicOps_RdmaSystemSetNetnsMode_Call{Call: _e.mock.On("RdmaSystemSetNetnsMode", newMode)}
}

func (_c *MockBasicOps_RdmaSystemSetNetnsMode_Call) Run(run func(newMode string)) *MockBasicOps_RdmaSystemSetNetnsMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBasicOps_RdmaSystemSetNetnsMode_Call) Return(err error) *MockBasicOps_RdmaSystemSetNetnsMode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBasicOps_RdmaSystemSetNetnsMode_Call) RunAndReturn(run func(newMode string) error) *MockBasicOps_RdmaSystemSetNetnsMode_Call {
	_c.Call.Return(run)
	return _c
}
